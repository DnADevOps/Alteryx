pipeline {
  agent any
  
  environment {
                Maintenance = 'System_Maintenance'
                SystemName = 'Alteryx'
                EnvironmentName = 'test'
                Locations = 'Seattle WA,San Jose CA'
                SOPS = 'SOP-1234,SOP-1235'      
                Frequency = 'Daily'
                EmailIds = 'DevOpsDemo825@gmail.com'
                Activities = '1. Review of Privileged User Accounts,4. Review of Program Files and Configurations,8. Verify System is in the CMDB'
                GitOrg='git@github.com:DnADevOps/'
                GitCredentials='DevOpsDemo825'
                GitBranch='main'                
              }
    
  stages 
  {
    stage('Validation') 
    {
      steps 
      {
        sh '''#!/bin/bash
              echo " The System is ${SystemName}"
              echo " The System is ${EnvironmentName}"              
              echo " The Locations are ${Locations}"
              echo " The SOPS are ${SOPS}"        
              echo " The Frequency is ${Frequency}"
              echo " The EmailIds are ${EmailIds}"
              echo " The Activities are ${Activities}"
              
              if [ -z "${SystemName}" ]; then
                echo "Environment variable SystemName has not been set or passed"
                exit 1
              elif [ -z "${EnvironmentName}" ]; then
                echo "Environment variable EnvironmentName has not been set or passed"
                exit 1              
              elif [ -z "${Locations}" ]; then
                echo "Environment variable Locations has not been set or passed"
                exit 1
              elif [ -z "${SOPS}" ]; then
                echo "Environment variable SOPS has not been set or passed"
                exit 1                
              elif [ -z "${Frequency}" ]; then
                echo "Environment variable Frequency has not been set or passed"
                exit 1 
              elif [ -z "${EmailIds}" ]; then
                echo "Environment variable EmailIds has not been set or passed"
                exit 1 
              elif [ -z "${Activities}" ]; then
                echo "Environment variable Activities has not been set or passed"
                exit 1 
              fi
              
              EmailIds=`echo ${EmailIds} | sed -e "s/,/;/"`
              echo " The EmailIds after the change are ${EmailIds}"
              
           '''
      }
      post {
            failure {
                     script {
                             echo "Validation stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }
    stage('Run All Jobs') 
    {
     steps {
             script
             {
               activity_list = Activities.split(',')
               echo "${SystemName}/${Maintenance}/${EnvironmentName}"             
               activity_list.each() 
               { 
                build job: "${SystemName}/${Maintenance}/${EnvironmentName}/${it}"; 
               }
             }
           }
      post {
            failure {
                     script {
                             echo "Run All Jobs stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }
    stage('Commit Results to Repo') 
    {
     steps {
             sh '''
                   pwd
                   ls -altr
                   BKP_IFS=IFS
                   IFS=","
                   cp `find ../ -name *.rpt | sed -e "s/^.*$/'&'/"` .
                   ls -ltr
                   git config --list
                   git add .
                   git commit -m "`date` commit"
                   git branch -M main
                   git push -u origin main
                '''
           }
      post {
            failure {
                     script {
                             echo "Commit Results to Repo stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    } 
    stage('Save Build in Artifactory') 
    {
     steps {
            steps{
                rtServer (
                    id: 'Artifactory-1',
                    url: 'http://54.160.21.79:8082//artifactory',
                    username: 'admin',
                    password: 'Devops2020',
                    timeout: 300
                )
                rtUpload (
                    serverId: 'Artifactory-1',
                    spec: '''{
                          "files": [
                            {
                              "pattern": "$WORKSPACE",
                              "target": "RDM_OBIEE/Test/${buildNumber}/"
                            }
                          ]
                    }'''
                )
            }
           }
      post {
            failure {
                     script {
                             echo "Save Build in Artifactory stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }     
    
  }
}
// Function to  send notification email
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    echo Job Status is $buildStatus
    //emailext (
    //    to: env.EMAIL_RECIPIENT,
    //    from: 'no-reply@cognizant.com',
    //    subject: "Jenkins: '${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus'",
    //    body: """
    //    Jenkins Job ${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus
    //    Check console output at ${env.BUILD_URL}
    //    """
    //)  
}
