pipeline {
  agent any
  
  environment {
                Maintenance = "'System_Maintenance'"
                SystemName = "'Alteryx'"
                Environment = ''
                Locations = 'Seattle WA,San Jose CA'
                SOPS = 'SOP-1234,SOP-1235'      
                Frequency = 'Daily'
                EmailIds = 'DevOpsDemo825@gmail.com'
                Activities = "'1. Review of Privileged User Accounts,4. Review of Program Files and Configurations,8. Verify System is in the CMDB'"
                GitOrg='git@github.com:DnADevOps/'
                GitCredentials='DevOpsDemo825'
                GitBranch='main'                
              }
    
  stages {
    stage('Validation') {
      steps {
        sh '''#!/bin/bash
              echo " The System is ${SystemName}"
              echo " The Locations are ${Locations}"
              echo " The SOPS are ${SOPS}"        
              echo " The Frequency is ${Frequency}"
              echo " The EmailIds are ${EmailIds}"
              echo " The Activities are ${Activities}"
              
              if [ -z "${SystemName}" ]; then
                echo "Environment variable SystemName has not been set or passed"
                exit 1
              elif [ -z "${Locations}" ]; then
                echo "Environment variable Locations has not been set or passed"
                exit 1
              elif [ -z "${SOPS}" ]; then
                echo "Environment variable SOPS has not been set or passed"
                exit 1                
              elif [ -z "${Frequency}" ]; then
                echo "Environment variable Frequency has not been set or passed"
                exit 1 
              elif [ -z "${EmailIds}" ]; then
                echo "Environment variable EmailIds has not been set or passed"
                exit 1 
              elif [ -z "${Activities}" ]; then
                echo "Environment variable Activities has not been set or passed"
                exit 1 
              fi
              
              EmailIds=`echo ${EmailIds} | sed -e "s/,/;/"`
              echo " The EmailIds after the change are ${EmailIds}"
              
           '''
      }
      post {
            failure {
                     script {
                             echo "Validation stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }
    stage('Run All Jobs') {
      steps {
             activity_list = ${Activities}.split(',')
             echo "${SystemName}/${Maintenance}/${Environment}"
             script
             {
               activity_list.each() 
               { 
                build job: "${SystemName}/${Maintenance}/${Environment}/${it}"; 
               }
             }
            }
      }
      post {
            failure {
                     script {
                             echo "Run All Jobs failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }    
  }
}
// Function to  send notification email
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    echo Job Status is $buildStatus
    //emailext (
    //    to: env.EMAIL_RECIPIENT,
    //    from: 'no-reply@cognizant.com',
    //    subject: "Jenkins: '${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus'",
    //    body: """
    //    Jenkins Job ${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus
    //    Check console output at ${env.BUILD_URL}
    //    """
    //)  
}
