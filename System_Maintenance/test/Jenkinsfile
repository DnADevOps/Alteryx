pipeline {
  agent any

environment {
                Maintenance = 'System_Maintenance'
                PlatformName = 'Alteryx'
                ReRun = <ReRun>
                BuildNumber = BuildNumber>
                EnvironmentName = 'test'
                Frequency = 'Daily'
                Locations = 'Seattle WA,San Jose CA'
                SOPS = 'SOP-1234,SOP-1235'      
                DueDate = <DueDate>
                StartDate = <StartDate>
                ReviwerEmail = <ReviwerEmail>
                ApproverEmail = <ApproverEmail>                
                Activities = '1. Review of Privileged User Accounts,4. Review of Program Files and Configurations,8. Verify System is in the CMDB'
                GitOrg='git@github.com:DnADevOps/'
                GitCredentials='DevOpsDemo825'
                GitBranch='main'                
              }
    
  stages 
  {
    stage('Validation') 
    {
      steps 
      {
        sh '''#!/bin/bash
              echo " The Maintenance is ${Maintenance}"
              echo " The Platform is ${PlatformName}"
              echo " ReRun = ${ReRun}"
              echo " BuildNumber = ${BuildNumber}"
              echo " The Environment is ${EnvironmentName}"                 
              echo " The Frequency is ${Frequency}"
              echo " The Locations are ${Locations}"
              echo " The SOPS are ${SOPS}"
              echo " The Due Date are ${DueDate}"
              echo " The Start Date are ${StartDate}"          
              echo " The ReviewerEmail are ${ReviwerEmail}"
              echo " The ApproverEmail are ${ApproverEmail}"
              echo " The Activities are ${Activities}"
  
              if [ -z "${Maintenance}" ]; then
                echo "Environment variable Maintenance has not been set or passed"
                exit 1
              elif [ -z "${PlatformName}" ]; then
                echo "Environment variable PlatformName has not been set or passed"
                exit 1
              elif [ -z "${ReRun}" ]; then
                echo "Environment variable ReRun has not been set or passed"
                exit 1
              elif [ -z "${BuildNumber}" ]; then
                echo "Environment variable BuildNumber has not been set or passed"
                exit 1
              elif [ -z "${EnvironmentName}" ]; then
                echo "Environment variable EnvironmentName has not been set or passed"
                exit 1              
              elif [ -z "${Locations}" ]; then
                echo "Environment variable Locations has not been set or passed"
                exit 1
              elif [ -z "${SOPS}" ]; then
                echo "Environment variable SOPS has not been set or passed"
                exit 1                
              elif [ -z "${Frequency}" ]; then
                echo "Environment variable Frequency has not been set or passed"
                exit 1                
              elif [ -z "${DueDate}" ]; then
                echo "Environment variable DueDate has not been set or passed"
                exit 1                
              elif [ -z "${StartDate}" ]; then
                echo "Environment variable StartDate has not been set or passed"
                exit 1 
              elif [ -z "${ReviewerEmail}" ]; then
                echo "Environment variable ReviewerEmail has not been set or passed"
                exit 1 
              elif [ -z "${ApproverEmail}" ]; then
                echo "Environment variable ApproverEmail has not been set or passed"
                exit 1 
              elif [ -z "${Activities}" ]; then
                echo "Environment variable Activities has not been set or passed"
                exit 1 
              fi
              
              EmailIds=`echo ${EmailIds} | sed -e "s/,/;/"`
              echo " The EmailIds after the change are ${EmailIds}"
              
           '''
      }
      post {
            failure {
                     script {
                             echo "Validation stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }
    stage('Run All Jobs') 
    {
     steps {
             script
             {
               activity_list = Activities.split(',')
               echo "${PlatformName}/${Maintenance}/${EnvironmentName}"             
               activity_list.each() 
               { 
                build job: "${PlatformName}/${Maintenance}/${EnvironmentName}/${it}"; 
               }
             }
           }
      post {
            failure {
                     script {
                             echo "Run All Jobs stage failure"
                             currentBuild.result = 'FAILURE'
                             notifyBuild(currentBuild.result)
                            }           
                    }
           }
    }
  
    
  }
}
// Function to  send notification email
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    echo Job Status is $buildStatus
    //emailext (
    //    to: env.EMAIL_RECIPIENT,
    //    from: 'no-reply@cognizant.com',
    //    subject: "Jenkins: '${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus'",
    //    body: """
    //    Jenkins Job ${env.JOB_NAME} [#${env.BUILD_NUMBER}] - $buildStatus
    //    Check console output at ${env.BUILD_URL}
    //    """
    //)  
}
